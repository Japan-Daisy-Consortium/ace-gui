sudo: required
# https://docs.travis-ci.com/user/reference/xenial/
dist: xenial
# https://docs.travis-ci.com/user/customizing-the-build/
branches:
  only:
    - master
  except:
    - '/^.*-?(?i:latest)-?.*$/'
    - '/^.*-?(?i:untagged)-?.*$/'
    - '/^.*-?(?i:preview)-?.*$/'
    - '/^.*-?(?i:deploy)-?.*$/'
    - '/^v\\d+\\.\\d+\\.\\d+.*$/'
    - /^.*-?(?i:continuous)-?.*$/
env:
  global:
    - TRAVIS_OS_NAME_=$TRAVIS_OS_NAME
matrix:
  include:
    - if: type = push
      os: osx
      osx_image: xcode11.2
      language: node_js
      node_js: "node"
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
#if: type = push OR pull_request
    - os: linux
      language: node_js
      node_js: "node"
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
    - if: type = push
      os: linux
      services: docker
      language: node_js
      node_js: "node"
      env:
        - TRAVIS_OS_NAME_=windows
# https://www.electron.build/multi-platform-build
# Switch to TravisCI "native" Windows support when it is ready (the main blocking issue right now is secret ENV vars, which we need to deploy to GitHub)
# https://travis-ci.community/c/environments/windows
# - os: windows
#   language: node_js
#   node_js: "node"
#   env:
#     - ELECTRON_CACHE=$HOME/.cache/electron
#     - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
install:
  # - set -e
  - echo "TRAVIS_INSTALL"
  - npm --global install npm@latest && npm --version
  - ls -als kb
  - git status
  - git --no-pager diff
  # - set +e
# cache: false
cache:
#  npm: true
#  yarn: true
  directories:
    - "$HOME/.npm"
#    - node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder
before_cache:
  # - set -e
  - 'rm -rf $HOME/.cache/electron-builder/wine'
  # - set +e
script:
  # - set -e
  - echo "TRAVIS_SCRIPT"
#  - npm --no-git-tag-version version prepatch && git --no-pager diff
  - 'sed -i -e "s/^  \"version\": \"\(.*\)\",$/  \"version\": \"\\1.${TRAVIS_BUILD_NUMBER}\",/g" package.json && cat package.json | grep -i VERSION'
  - 'sed -i -e "s/^  \"version\": \"\(.*\)\",$/  \"version\": \"\\1.${TRAVIS_BUILD_NUMBER}\",/g" package-asar.json && cat package-asar.json | grep -i VERSION'
  - 'sed -i -e "s/^  \"version\": \"\(.*\)\",$/  \"version\": \"\\1.${TRAVIS_BUILD_NUMBER}\",/g" package-asar-dev.json && cat package-asar-dev.json | grep -i VERSION'
  - 'npm --version'
  - 'yarn --version'
  - 'node --version'
  - 'pwd'
  - 'ls -als'
#  - 'ls -als node_modules'
  - 'env | grep -iE "DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_"'
  - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then yarn run build:prod; fi'
  - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    if [[ "$TRAVIS_OS_NAME_" == "linux" ]] || [[ "$TRAVIS_OS_NAME_" == "osx" ]]; then
    echo "TRAVIS_OS_SCRIPT" && pwd && ls -als && export MY_PWD=`pwd` && echo "PWD ${MY_PWD}" && ((curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.0) || echo "YARN OK") && export PATH="$HOME/.yarn/bin:$PATH" && yarn --version && cd .. && pwd && ls -als && git clone https://github.com/daisy/ace.git && cd ace && pwd && ls -als && git checkout pr-merge/223+227 && rm yarn.lock && rm -rf node_modules && yarn install && rm -rf node_modules/@daisy && rm -rf packages/*/node_modules/@daisy && VERBOSE=1 yarn build && yarn upgrade && rm -rf packages/*/node_modules && git --no-pager diff && cd $MY_PWD && pwd && ls -als && ls -als kb && rm yarn.lock && rm -rf node_modules && yarn install && git --no-pager diff ;
    fi;
    fi'
  - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    if [[ "$TRAVIS_OS_NAME_" == "linux" ]]; then
    yarn run package:linux ;
    elif [[ "$TRAVIS_OS_NAME_" == "osx" ]]; then
    yarn run package:mac:skip-notarize ;
    elif [[ "$TRAVIS_OS_NAME_" == "windows" ]]; then
    docker run --rm
    --env-file <(env | grep -iE "DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_")
    -v ${PWD}:/project
    -v ~/.cache/electron:/root/.cache/electron
    -v ~/.cache/electron-builder:/root/.cache/electron-builder
    electronuserland/builder:wine
    /bin/bash
    -c "pwd && ls -als && npm --global install yarn && yarn --version && cd .. && pwd && ls -als && git clone https://github.com/daisy/ace.git && cd ace && pwd && ls -als && git checkout pr-merge/223+227 && rm yarn.lock && rm -rf node_modules && yarn install && rm -rf node_modules/@daisy && rm -rf packages/*/node_modules/@daisy && VERBOSE=1 yarn build && yarn upgrade && rm -rf packages/*/node_modules && git --no-pager diff && cd /project && pwd && ls -als && ls -als kb && rm yarn.lock && rm -rf node_modules && yarn install && git --no-pager diff && npm rebuild node-sass && yarn run package:win";
    fi;
    fi'
  # - set +e
after_success:
  # - set -e
  - 'pwd'
  - 'ls -als'
  - 'ls -als dist'
  - 'ls -als dist/mac'
  - 'ls -als dist/linux-unpacked'
  - 'ls -als dist/win-unpacked'
  # - set +e
after_failure:
  # - set -e
  - 'pwd'
  - 'ls -als'
  - 'ls -als dist'
  - 'ls -als dist/mac'
  - 'ls -als dist/linux-unpacked'
  - 'ls -als dist/win-unpacked'
  # - set +e
# https://docs.travis-ci.com/user/deployment/
before_deploy:
  # - set -e
  - 'if [[ "$TRAVIS_OS_NAME_" == "windows" ]]; then
    npm install --global @octokit/rest@latest ;
    fi'
  - export TRAVIS_TAG="latest-$TRAVIS_OS_NAME_"
  - node build/release-github.js
  # - set +e
# - git config --local user.name "danielweck"
# - git config --local user.email "daniel.weck@gmail.com"
# - git tag -l --format="%(refname)   %(taggerdate)"
# - echo $TRAVIS_BRANCH
# - export GIT_COMMITTER_DATE="$(git show $TRAVIS_BRANCH --format=%aD | head -1)" && echo $GIT_COMMITTER_DATE
# - export GIT_TAG_CURRENT=$(git describe --abbrev=0 --tags) && echo $GIT_TAG_CURRENT
# - 'if [[ $GIT_TAG_CURRENT == *-preview ]] ; then
#   export TRAVIS_TAG=$GIT_TAG_CURRENT && echo $TRAVIS_TAG ;
#   else
#   export GIT_TAG_CURRENT_NUM=${GIT_TAG_CURRENT:1} && echo $GIT_TAG_CURRENT_NUM &&
#   export GIT_TAG_CURRENT_NUM_LAST_DIGIT=${GIT_TAG_CURRENT_NUM:4} && echo $GIT_TAG_CURRENT_NUM_LAST_DIGIT &&
#   export GIT_TAG_CURRENT_NUM_LAST_DIGIT_INC=$((GIT_TAG_CURRENT_NUM_LAST_DIGIT+1)) && echo $GIT_TAG_CURRENT_NUM_LAST_DIGIT_INC &&
#   export GIT_TAG_CURRENT_NUM_PREFIX=${GIT_TAG_CURRENT_NUM%.*} && echo $GIT_TAG_CURRENT_NUM_PREFIX &&
#   export TRAVIS_TAG="v${GIT_TAG_CURRENT_NUM_PREFIX}.${GIT_TAG_CURRENT_NUM_LAST_DIGIT_INC}-preview" && echo $TRAVIS_TAG &&
#   (git tag -a "${TRAVIS_TAG}" $TRAVIS_BRANCH -m "tag ${TRAVIS_TAG}" && echo "tag ok") || echo "tag fail (already exist?)" ;
#   fi'
# - git tag -l --format="%(refname)   %(taggerdate)"
# ((curl -X DELETE --header "Authorization: token ${GH_TOKEN}" "https://api.github.com/repos/${TRAVIS_REPO_SLUG}/releases/${GIT_TAG_CURRENT}" && echo "delete release ok") || echo "delete release fail?") &&
#  git tag -d $GIT_TAG_CURRENT &&
#  git tag -l --format="%(refname)   %(taggerdate)" &&
#  git push -q "https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git" origin :refs/tags/$GIT_TAG_CURRENT > /dev/null 2>&1
#  - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)}
#  - git push -q --tags "https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git" origin $TRAVIS_BRANCH > /dev/null 2>&1
deploy:
  provider: releases
  overwrite: true
  api_key: $GH_TOKEN
  file_glob: true
  file:
    - "dist/**/*.AppImage"
    - "dist/**/*.deb"
    - "dist/**/*.msi"
    - "dist/*.exe"
    - "dist/**/*.dmg"
  skip_cleanup: true
# name: "[$TRAVIS_TAG] continuous test build (pre-release)"
  prerelease: true
  on:
    branch: master
#    tags: true
# TODO:
# https://docs.travis-ci.com/user/build-stages#deploying-to-github-releases
# (build stages, shared storage for build artifacts, single deploy (no need to overwrite, no need to deal with concurrent tag access))
